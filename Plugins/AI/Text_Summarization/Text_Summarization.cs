namespace Text_Summarization
{
    using System.ComponentModel.DataAnnotations;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.Json;
    using DevTool.Categories;
    using DevTool.Input2Execute.Content_Expansion;
    using DevTool.Roles;
    using DevTool.UISchema;
    using Plugins.DevTool;

    public class Text_Summarization : IDevToolPlugin
    {
        public int Id { get; set; }
        public string Name => "Text Summarization";

        public Category Category => Category.AI;

        public string Description { get; set; } = "Summarize text based on user input using Gemini LLM";

        public Roles AccessiableRole { get; set; } = Roles.Anonymous;
        public bool IsActive { get; set; } = true;
        public bool IsPremium { get; set; } = true;
        public string Icon { get; set; } = @"
<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 24 24"">
    <g fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round"">
        <path d=""M7 4a2 2 0 0 0-2 2v3a2 3 0 0 1-2 3a2 3 0 0 1 2 3v3a2 2 0 0 0 2 2""></path>
        <path d=""M17 4a2 2 0 0 1 2 2v3a2 3 0 0 0 2 3a2 3 0 0 0-2 3v3a2 2 0 0 1-2 2""></path>
    </g>
</svg>";

        public Schema schema => new Schema
        {
            id = Id,
            uiSchemas = new List<UISchema> {
                new UISchema {
                    inputs = new List<SchemaInput> {
                        new SchemaInput {
                            id = "inputText",
                            label = "Your Text",
                            type = ComponentType.textarea.ToString(),
                            defaultValue = "Trong m·ªôt th·∫ø gi·ªõi ƒëang thay ƒë·ªïi nhanh ch√≥ng, c√¥ng ngh·ªá ƒë√£ tr·ªü th√†nh y·∫øu t·ªë kh√¥ng th·ªÉ thi·∫øu trong cu·ªôc s·ªëng h√†ng ng√†y c·ªßa ch√∫ng ta. T·ª´ vi·ªác s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i th√¥ng minh, m√°y t√≠nh b·∫£ng cho ƒë·∫øn c√°c thi·∫øt b·ªã gia ƒë√¨nh th√¥ng minh, c√¥ng ngh·ªá ƒë√£ thay ƒë·ªïi c√°ch ch√∫ng ta t∆∞∆°ng t√°c v·ªõi m√¥i tr∆∞·ªùng xung quanh. C√πng v·ªõi s·ª± ph√°t tri·ªÉn m·∫°nh m·∫Ω c·ªßa Internet, vi·ªác k·∫øt n·ªëi v·ªõi b·∫°n b√®, gia ƒë√¨nh v√† ƒë·ªìng nghi·ªáp tr·ªü n√™n d·ªÖ d√†ng h∆°n bao gi·ªù h·∫øt. Tuy nhi√™n, s·ª± ph√°t tri·ªÉn n√†y c≈©ng mang l·∫°i nh·ªØng th√°ch th·ª©c l·ªõn, ƒë·∫∑c bi·ªát l√† v·∫•n ƒë·ªÅ b·∫£o m·∫≠t v√† quy·ªÅn ri√™ng t∆∞. C√°c c√¥ng ty c√¥ng ngh·ªá ƒëang ƒë·ªëi m·∫∑t v·ªõi √°p l·ª±c kh√¥ng ng·ª´ng trong vi·ªác b·∫£o v·ªá d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† ƒë·∫£m b·∫£o r·∫±ng th√¥ng tin c√° nh√¢n kh√¥ng b·ªã l·ªô ra ngo√†i.M·ªôt trong nh·ªØng y·∫øu t·ªë quan tr·ªçng trong vi·ªác b·∫£o v·ªá th√¥ng tin l√† m√£ h√≥a. M√£ h√≥a d·ªØ li·ªáu gi√∫p ƒë·∫£m b·∫£o r·∫±ng ch·ªâ nh·ªØng ng∆∞·ªùi c√≥ quy·ªÅn truy c·∫≠p m·ªõi c√≥ th·ªÉ xem ƒë∆∞·ª£c th√¥ng tin c√° nh√¢n c·ªßa b·∫°n. ƒêi·ªÅu n√†y r·∫•t quan tr·ªçng trong b·ªëi c·∫£nh c√°c cu·ªôc t·∫•n c√¥ng m·∫°ng ng√†y c√†ng tr·ªü n√™n tinh vi v√† kh√≥ l∆∞·ªùng. C√°c hacker kh√¥ng ch·ªâ t·∫•n c√¥ng v√†o c√°c h·ªá th·ªëng c·ªßa c√°c c√¥ng ty l·ªõn, m√† c√≤n nh·∫Øm ƒë·∫øn ng∆∞·ªùi d√πng c√° nh√¢n, ƒë√°nh c·∫Øp th√¥ng tin v√† s·ª≠ d·ª•ng v√†o c√°c m·ª•c ƒë√≠ch x·∫•u. V√¨ v·∫≠y, m·ªói c√° nh√¢n c·∫ßn ph·∫£i c√≥ √Ω th·ª©c b·∫£o v·ªá d·ªØ li·ªáu c·ªßa m√¨nh b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c bi·ªán ph√°p b·∫£o m·∫≠t m·∫°nh m·∫Ω, ch·∫≥ng h·∫°n nh∆∞ m·∫≠t kh·∫©u ph·ª©c t·∫°p v√† ph·∫ßn m·ªÅm ch·ªëng virus.",
                            rows = 8
                        }
                    },
                    outputs = new List<SchemaOutput> {
                        new SchemaOutput {
                            id = "textoutput",
                            label = "Your Summarized Text",
                            type = ComponentType.text.ToString(),
                            rows = 8
                        }
                    }
                },
            }
        };

        private readonly string GeminiApiKey = "AIzaSyAhSqv-qMAco2y7Yy4w1_JXAGvFxRT-lWI"; // üîÅ Thay b·∫±ng API Key th·∫≠t c·ªßa b·∫°n

        private string SummarizeText(string inputText)
        {
            using var client = new HttpClient();

            var requestUri = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GeminiApiKey}";

            var requestBody = new
            {
                contents = new[] 
                {
                    new
                    {
                        parts = new[] 
                        {
                            new { text = $"T√≥m t·∫Øt vƒÉn b·∫£n d·ª±a v√†o vƒÉn b·∫£n c·ªßa ng∆∞·ªùi d√πng, b·∫°n ch·ªâ c·∫ßn tr·∫£ ra k·∫øt qu·∫£ m√† kh√¥ng c·∫ßn n√≥i g√¨ th√™m, ƒë√¢y l√† vƒÉn b·∫£n c·ªßa ng∆∞·ªùi d√πng : {inputText}" }
                        }
                    }
                }
            };

            var jsonBody = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

            var response = client.PostAsync(requestUri, content).Result;

            if (!response.IsSuccessStatusCode)
            {
                var error = response.Content.ReadAsStringAsync().Result;
                return $"[L·ªói g·ªçi Gemini API]: {error}";
            }

            var responseString = response.Content.ReadAsStringAsync().Result;

            try
            {
                using var doc = JsonDocument.Parse(responseString);
                var root = doc.RootElement;

                // Truy xu·∫•t ph·∫ßn text t√≥m t·∫Øt tr·∫£ v·ªÅ
                var text = root.GetProperty("candidates")[0]
                               .GetProperty("content")
                               .GetProperty("parts")[0]
                               .GetProperty("text")
                               .GetString();

                return text ?? "[L·ªói] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c t√≥m t·∫Øt t·ª´ Gemini.";
            }
            catch (Exception ex)
            {
                return "[L·ªói] Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ Gemini: " + ex.Message;
            }
        }

        public object Execute(object input)
        {
            var dict = JsonSerializer.Deserialize<Dictionary<string, object>>(input.ToString());
            var json = JsonSerializer.Serialize(dict);
            var myInput = JsonSerializer.Deserialize<Content_ExpansionInput>(json);

            Console.WriteLine("Mapped Input: " + JsonSerializer.Serialize(myInput));
            Validator.ValidateObject(myInput, new ValidationContext(myInput), validateAllProperties: true);
            Console.WriteLine("Validated Input");

            var result = SummarizeText(myInput.inputText);

            return new Dictionary<string, object> {
                { "textoutput", result }
            };
        }

        public string GetSheme1()
        {
            throw new NotImplementedException();
        }
    }
}
